#!/bin/bash

for f in /etc/elj.d/*; do source $f; done

#############
# FUNCTIONS #
#############

# prepend *path
function prepend_path() {
    if [ -z "$1" ]; then
        echo "$2"
    else
        echo "$1:$2"
    fi
}

# append *path
function append_path() {
    if [ -z "$1" ]; then
        echo "$2"
    else
        echo "$1:$2"
    fi
}

# Dump AppCDS class list
function appcds_app_lst() {
    echo -n " -Xshare:on"
    echo -n " -XX:DumpLoadedClassList=${APPCDS_DIR}/${APPCDS_NAME}.lst"
}

# Dump AppCDS data
function appcds_app_jsa() {
    echo -n " -Xshare:dump"
    echo -n " -XX:SharedClassListFile=${APPCDS_DIR}/${APPCDS_NAME}.lst"
    echo -n " -XX:SharedArchiveFile=${APPCDS_DIR}/${APPCDS_NAME}.jsa"
}

# flush AppCDS cache
function appcds_delete() {
    rm -f "${APPCDS_DIR}/${APPCDS_NAME}.lst" "${APPCDS_DIR}/${APPCDS_NAME}.jsa"
}

# CDS flag switch
function run_cds_flags() {
    if [ "$CACHE_MODE" == "none" ]; then
        echo -n " -Xshare:off"
    elif [ "$CACHE_MODE" == "cds" ]; then
        echo -n " -Xshare:on"
    elif [ "$CACHE_MODE" == "appcds" ]; then
        echo -n " -Xshare:on"
        echo -n " -XX:SharedArchiveFile=${APPCDS_DIR}/${APPCDS_NAME}.jsa"
    fi
}

# Check if AppCDS is OK
function appcds_verify() {
    if [ "$CACHE_MODE" == "appcds" ]; then
        if [ -f "${APPCDS_DIR}/${APPCDS_NAME}.lst" ] && [ -f "${APPCDS_DIR}/${APPCDS_NAME}.jsa" ]; then
            return 0
        else
            return 1
        fi
    else
        return 0
    fi
}

# print help message
function printhelp() {
    echo "elj-run -- run java programs with ev3dev-lang-java" >&2
    echo "Usage:" >&2
    echo "  elj-run <flags> -- <program args>" >&2
    echo "General flags:" >&2
    echo "  --help                         Shows this help message." >&2
    echo "  --program <path>               Path to the program JAR." >&2
    echo "  --mod <path>                   Name of program module. If set, java module mode is used." >&2
    echo "  --java-exe <path>              Override the java executable to use." >&2
    echo "  --extra-jvm-flags '<flags>'    Append flags to java invocation." >&2
    echo "  --extra-class-path '<paths>'   Prepend classpath with additional paths." >&2
    echo "  --extra-module-path '<paths>'  Prepend modulepath with additional paths." >&2
    echo "Caching flags:" >&2
    echo "  --cache-mode <mode>            Set the CDS mode. Possible options are: none, cds, appcds" >&2
    echo "  --appcds-name <id>             Set AppCDS cache name." >&2
    echo "  --appcds-dir <path>            Override AppCDS cache base directory." >&2
    echo "  --appcds-flush                 Clean AppCDS cache and exit." >&2
}

# process jar/module flags and adjust classpath/modulepath/"program specifier"
function process_program_mode() {
    if [ ! -z "$MOD_NAME" ]; then
        if [ ! -z "$JAR_FILE" ]; then
            MODULE_PATH="$(append_path "$MODULE_PATH" "$JAR_FILE")"
        fi
        PRGSPEC="-m $MOD_NAME"
    else
        if [ ! -z "$JAR_FILE" ]; then
            CLASS_PATH="$(append_path "$CLASS_PATH" "$JAR_FILE")"
            PRGSPEC="-jar $JAR_FILE"
        else
            PRGSPEC=""
        fi
    fi
}

# run application while dumping appcds cache
function appcds_dump_run() {
    mkdir -p "${APPCDS_DIR}"

    echo "Generating loaded class list."
    "$JAVA_EXE" -cp "$CLASS_PATH" -p "$MODULE_PATH" $JAVA_FLAGS $(appcds_app_lst) $PRGSPEC "$@"

    echo "Dumping AppCDS data."
    "$JAVA_EXE" -cp "$CLASS_PATH" -p "$MODULE_PATH" $JAVA_FLAGS $(appcds_app_jsa)
}

# run application normally
function normal_run() {
    exec "$JAVA_EXE" -cp "$CLASS_PATH" -p "$MODULE_PATH" $JAVA_FLAGS $(run_cds_flags) $PRGSPEC "$@"
}

#################
# INPUT PARSING #
#################

if [ "$#" -eq 0 ]; then
    printhelp
    exit 1
fi

ARGUMENT_LIST=(
    "help"
    "program:"
    "mod:"
    "java-exe:"
    "extra-jvm-flags:"
    "extra-class-path:"
    "extra-module-path:"
    "cache-mode:"
    "appcds-name:"
    "appcds-dir:"
    "appcds-flush"
)

OPTSTR="$(getopt -o "" -l "$(printf "%s," "${ARGUMENT_LIST[@]}")" -n 'elj-run' -- "$@")"
OPTRET="$?"
if [ "$OPTRET" -ne 0 ]; then
  exit 1
fi
eval set -- "$OPTSTR"

while true ; do
    case "$1" in
    --help)
        printhelp
        exit 0
        ;;
    --program)
        JAR_FILE="$2"
        shift 2 ;;
    --mod)
        MOD_NAME="$2"
        shift 2 ;;
    --java-exe)
        JAVA_EXE="$2"
        shift 2 ;;
    --extra-jvm-flags)
        JAVA_FLAGS="$JAVA_FLAGS $2"
        shift 2 ;;
    --extra-class-path)
        CLASS_PATH="$(prepend_path "$CLASS_PATH" "$2")"
        shift 2 ;;
    --extra-module-path)
        MODULE_PATH="$(prepend_path "$MODULE_PATH" "$2")"
        shift 2 ;;
    --cache-mode)
        case "$2" in
        none|cds|appcds)
            CACHE_MODE="$2";;
        *)
            echo "Error: invalid CDS mode." >&2
            exit 1
        esac
        shift 2 ;;
    --appcds-name)
        APPCDS_NAME="$2"
        shift 2 ;;
    --appcds-dir)
        APPCDS_DIR="$2"
        shift 2 ;;
    --appcds-flush)
        APPCDS_FLUSH=yes
        shift ;;
    --) shift; break ;;
    *) echo "Internal error!" ; exit 1 ;;
    esac
done

##############
# MAIN LOGIC #
##############

if [ -z "$APPCDS_NAME" ]; then
    if [ -z "$JAR_NAME" ]; then
        APPCDS_NAME="unnamed"
    else
        # https://stackoverflow.com/a/36866015
        name="$(readlink -f "$JAR_FILE")"
        name="$(basename -- $name)"
        name="$(echo "$name" | sed -e 's/\.[^.]*$//')"
        APPCDS_NAME="$name"
    fi
fi

if [ "$APPCDS_FLUSH" == "yes" ]; then
    appcds_delete
    exit 0
fi

process_program_mode
if [ "$CACHE_MODE" == "appcds" ]; then
    if appcds_verify; then
        normal_run
    else
        appcds_dump_run
    fi
else
    normal_run
fi
